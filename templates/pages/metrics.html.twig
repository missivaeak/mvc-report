{% extends "base.html.twig" %}

{% block title %}{{title}}{% endblock %}

{% block body %}
<h1>Kodkvalitet och clean code</h1>

<h2>Introduktion</h2>

<p><i>Börja med en rubrik “Introduktion” där du förklarar de sex C:na och hur de kan påverka kodens kvalitet. Exemplifiera, där det passar, med några mätvärden som är kopplad till din egen kod och ge en kort förklaring av mätvärdet relaterat till kodkvalitet.</i></p>

<p>En minnesregel för god kodkvalitet kan vara de sex C:na; codestyle, coverage, complexity, cohesion, coupling och CRAP. De ringa in vissa önskvärda eller oönskvärda mönster som kan förekomma i kod.</p>

<p>Codestyle handlar om att skriva koden enligt en bra kodstil, med bra menas en kodstil som är lättläst och lätt att efterlikna. I detta arbete så används csfix för att kontrollera samt fixa kodstilen och den kan därför ses som uppfylld utan reservation, det är vanligt att projekt har såna här stilregler men de stil reglerna behöver inte vara samma för alla projekt ens med samma programmeringsspråk.</p>

<p>Nyckelordet <i>coverage</i> används för att beskriva hur stor del av ett projekts logiska rader kod som testas. Det säger ingenting om testernas kvalité eller innehåll, enbart hur mycket som testas. Det kan således ge en falsk bild, antigen positivt eller negativt, av hur bra tester ett projekt har.</p>

<p><i>Complexity</i> är ett begrepp för ett projekts komplexitet. Det finns inget enskild mätvärde för detta, men oftast används cyklomatisk complexitet (<i>cyclomatic complexity el. CC</i>. CC bedömer enskilda metoders olika beslutsvägar, så om en metod har många möjliga beslutsvägar ökar CC. Hög CC betyder att metoden blir svårare att förstå samt svårare att testa.</p>

<h2>Phpmetrics</h2>

<p><i>Skapa en rubrik “Phpmetrics” och analysera dess rapport för din kod. Använd mätvärdena för att hitta flaskhalsar och svaga punkter i din kod (minst 3 stycken). Du vill hitta kod som har förbättringspotential. Visualisera med någon representativ bild från rapporten.</i></p>

<p><i>I ovan analys så kopplar du dina “findings” till 6C. Använd gärna något ytterligare mättal som du finner relevant och intressant.</i></p>

<p>ooooo</p>

<h2>Scrutinizer</h2>

<p><i>Skapa en rubrik “Scrutinizer” och analysera dess rapport för din kod. Gör på samma sätt som du gjorde med Phpmetrics.</i></p>

<p><i>I ovan analys så kopplar du dina “findings” till 6C. Använd gärna något ytterligare mättal som du finner relevant och intressant.</i></p>

<p>aoeaoee</p>

<h2>Förbättringar</h2>

<p><i>Skapa en ny rubrik “Förbättringar” där du väljer minst 3 förbättringar som du vill göra med din kod (gärna fler).</i></p>

<ul>
    <li>Exempel på förbättringar kan vara:</li>
    <ul>
        <li>Fixa issues</li>
        <li>Öka kodtäckning</li>
        <li>Fokusera på kvalitetsindex i Scrutinizer</li>
        <li>Minska komplexiteten i class/metod</li>
    </ul>
    <li>Börja med att skriva om förbättringarna, vad du tänker göra, varför du väljer dem och hur du tror det kommer påverka mätvärdena för kvalitet.</li>
    <li>Implementera sedan förbättringarna.</li>
    <li>Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.</li>
    <li>Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.</li>
</ul>


<p>aoeaoeaoeoe</p>

<h2>Diskussion</h2>

<p>aoeaotheaoe</p>

{% endblock %}