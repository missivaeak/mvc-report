{% extends "base.html.twig" %}

{% block title %}{{title}}{% endblock %}

{% block body %}
<h1>Kodkvalitet och clean code</h1>

<h2>Introduktion</h2>

<p>En minnesregel för god kodkvalitet kan vara de sex C:na; codestyle, coverage, complexity, cohesion, coupling och CRAP. De ringa in vissa önskvärda eller oönskvärda mönster som kan förekomma i kod.</p>

<p>Codestyle handlar om att skriva koden enligt en bra kodstil, med bra menas en kodstil som är lättläst och lätt att efterlikna. I detta arbete så används csfix för att kontrollera samt fixa kodstilen och den kan därför ses som uppfylld utan reservation, det är vanligt att projekt har såna här stilregler men de stilreglerna behöver inte vara samma för alla projekt ens med samma programmeringsspråk.</p>

<p>Nyckelordet <i>coverage</i> används för att beskriva hur stor del av ett projekts logiska rader kod som testas. Det säger ingenting om testernas kvalité eller innehåll, enbart hur mycket som testas. Det kan således ge en falsk bild, antigen positivt eller negativt, av hur bra tester ett projekt har. Lite slarvigt kan man säga att 70% och mer är hjälpligt, 90% eller mer är bra.</p>

<p><i>Complexity</i> är ett begrepp för ett projekts komplexitet. Det finns inget enskild mätvärde för detta, men oftast används cyklomatisk complexitet (<i>cyclomatic complexity el. CC</i>). CC bedömer enskilda metoders olika beslutsvägar, så om en metod har många möjliga beslutsvägar ökar CC. Hög CC betyder att metoden blir svårare att förstå samt svårare att testa. Klasserna i detta projekt har CC som sträcker sig mellan 1 och 40 och metoder som sträcker sig mellan 0 och 17.</p>

<p>Det fjärde C:et står för <i>cohesion</i> och likt C:et innan så står det för en abstrakt idé med ett mätvärde som ofta används för att representera den idéen. Cohesion handlar om att ens kod ska hänga samman i syfte och funktion, exempelvis så ska en klass arbeta med ett avgränsat arbetsområde. Just denna del kan bedömas med mätvärded <i>Lack of cohesion of methods</i>, där en klass bedöms på just det. Ett högt LCOM betyder stor brist på <i>cohesion</i> och är inte önskvärt. Exempelvis så har detta projekt i skrivandes hög LCOM på controllern som styr alla /api/-routes, med ett värde på 9. Det är högt just för att den controllern använder sig av och arbetar med nästan alla klasser i hela projeketet.</p>

<p><i>Coupling</i> handlar om hur sammankopplade delar av koden är. Vi vill ha kod med låg coupling, det vill säga som gör sin egen sak utan att använda sig eller bli använd av andra delar av koden för mycket. Coupling skapar beroenden som gör det svårare att underhålla och arbeta med koden. Man kan mäta coupling med <i>efferent coupling</i> och <i>afferent coupling</i>, EC och AC. AC anger hur många andra klasser som använder klassen och EC anger hur många andra klasser som klassen använder. I detta projekt har klasserna mellan 0 och 5 AC och mellan 0 och 13 EC.</p>

<p>Det sista C:et är <i>CRAP</i>, <i>change risk anti-pattern</i> eller <i>change risk analyzer and predictor</i>, och det är ett mätvärde som jämför en metods komplexitet med hur mycket tester som utförs på metoden. Idéen är att om du har högt CRAP på en metod så kan det behövas mer tester för att minska risken av buggar i koden.</p>

<h2>Phpmetrics</h2>

<p>I <a href="../docs/metrics">denna</a> analys av phpmetrics går det att hitta vissa svagheter i projektet.</p>

<figure>
    <img src="{{ asset('img/metrics/phpmetrics-maintainability.png') }}" alt="Svårunderhållen klass">
    <figcaption>Phpmetrics graf för maintainability och complexitet.</figcaption>
</figure>

<p>Enligt phpmetrics får klassen GinRummyScoring lägst i Maintainablity Index, vilket är ett sammansatt värde som används för att avgöra hur lätt en klass är att underhålla.</p>

<figure>
    <img src="{{ asset('img/metrics/phpmetrics-coupling.png') }}" alt="Klass med hög coupling.">
    <figcaption>Hög AC och EC hos klassen GinRummyHand.</figcaption>
</figure>

<p>Klassen GinRummyHand har hög coupling, framförallt så har den hög AC. Det är många andra klassen som använder GinRummyHand.</p>

<figure>
    <img src="{{ asset('img/metrics/phpmetrics-cohesion.png') }}" alt="Klass med låg cohesion.">
    <figcaption>Hög LCOM i klassen ApiController.</figcaption>
</figure>

<p>ApiController har stor brist på cohesion, den försöker göra mycket. En annan del av phpmetrics varnar för att den är en <i>god class</i>, vilket är tätt sammakopplat med låg cohesion.</p>

<h2>Scrutinizer</h2>

<blockquote class="block">
    <a href="https://scrutinizer-ci.com/g/missivaeak/mvc-report/?branch=main"><img src="https://scrutinizer-ci.com/g/missivaeak/mvc-report/badges/quality-score.png?b=main" alt="Scrutinizer Code Quality"></a>

    <a href="https://scrutinizer-ci.com/g/missivaeak/mvc-report/?branch=main"><img src="https://scrutinizer-ci.com/g/missivaeak/mvc-report/badges/coverage.png?b=main" alt="Code Coverage"></a>

    <a href="https://scrutinizer-ci.com/g/missivaeak/mvc-report/build-status/main"><img src="https://scrutinizer-ci.com/g/missivaeak/mvc-report/badges/build.png?b=main" alt="Build Status"></a>
</blockquote>

<p>I Scrutinizers analys så får projektet bra betyg, se badges ovan. Trots det går det att hitta vissa svagheter.</p>

<figure>
    <img src="{{ asset('img/metrics/scrutinizer-cc.png') }}" alt="Hög cyklomatiskt komplexitet.">
    <figcaption>En av projektets mer komplexa metoder, med CC-värde 17.</figcaption>
</figure>

<p>Scrutinizer varnar för att denna metoden har hög cyklomatiskt komplexitet.</p>

<figure>
    <img src="{{ asset('img/metrics/scrutinizer-crap.png') }}" alt="Metoder med högt CRAP-värde.">
    <figcaption>Projektets högsta CRAP-värden.</figcaption>
</figure>

<p>Här kan man se projektets högsta CRAP-värden, där metoden addToOthersMeld() är i störst behov av att ses över.</p>

<figure>
    <img src="{{ asset('img/metrics/scrutinizer-coverage.png') }}" alt="Metoderna med lägst coverage.">
    <figcaption>Metoderna med lägst coverage.</figcaption>
</figure>

<p>Här kan man kolla på testtäckning i koden. Även fast det är bra att ha över 90% täckning, så finns det möjlighet att testa även resten av koden här.</p>

<h2>Förbättringar</h2>

<p>För att förbättra projeketets kodkvalitet kommer jag välja att fokusera på några åtgärder.</p>

<h3>Hög komplexitet Kmom03Controller::gameOpponent()</h3>

<p>Denna metoden är såpass komplex på grund av att den innehåller motståndarens beslustsfattande villkor samt speldrag direkt i kontrollern. Jag har för avsikt att flytta ut mycket av koden från kontrollern till en klass, möjligtvis en helt ny klass som representerar just motståndarens besultsfattande.</p>

<h3>Låg cohesion ApiController</h3>

<p>Denna kontroller har låg cohesion på grund av att jag lagt in alla API-routes i samma controller. Jag plockar ut varje kursmoments egna API-routes till sin egen kontroller och då bör cohesion bli märkbart bättre.</p>

<h3>Hög komplexitet och CRAP i fler metoder i GinRummyScoring</h3>

<p>Denna klass har några alldeles för stora metoder. Jag åtgärdar den höga komplexiteten genom att bryta upp metoderna i mindre beståndsdelar, då kommer även CRAP att minska som följd.</p>

<h3>Issues i Scrutinizer</h3>

<p>Jag jobbar igenom de issues som Scrutinizer flaggar för, den har en bra mess detector som jag gärna betar av.</p>

<p>aoeaoeaoeoe</p>

<i><ul>
    <li>Implementera sedan förbättringarna.</li>
    <li>Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.</li>
    <li>Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.</li>
</ul></i>

<h2>Diskussion</h2>

<p>aoeaotheaoe</p>

{% endblock %}